name: Zero Downtime Rolling Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 체크아웃
      - name: Check out source
        uses: actions/checkout@v3

      # 2) AWS 인증 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3) ECR 로그인
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # 4) Docker Build & Push (frontend)
      - name: Build & Push Frontend
        run: |
          # frontend/ 디렉터리에서 빌드
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest ./frontend
          
          # ECR에 푸시
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest

      # 5) Docker Build & Push (backend)
      - name: Build & Push Backend
        run: |
          # backend/ 디렉터리에서 빌드
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest ./backend
          
          # ECR에 푸시
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest

      # 6) Elastic Beanstalk 배포
      - name: Deploy to Elastic Beanstalk
        run: |
          # EB CLI 설치
          pip install awsebcli --upgrade --user
          export PATH=$HOME/.local/bin:$PATH

          # EB 초기 설정
          #  - app name, platform, region은 상황에 맞게 수정
          eb init ${{ secrets.EB_APP_NAME }} --platform "64bit Amazon Linux 2 v4.0.6 running Docker" --region ${{ secrets.AWS_REGION }}

          # 배포 환경 지정
          eb use ${{ secrets.EB_ENV_NAME }}

          # 배포 버전 라벨 생성
          VERSION_LABEL="community-$(date +'%Y%m%d%H%M%S')"

          # Dockerrun.aws.json 파일 내에서 'frontend:latest', 'backend:latest' 이미지를 참조

          # 배포
          eb deploy ${{ secrets.EB_ENV_NAME }} --label $VERSION_LABEL --staged
